//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp1.FileServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileServiceClient.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DownLoad", ReplyAction="http://tempuri.org/IFileService/DownLoadResponse")]
        System.IO.Stream DownLoad(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DownLoad", ReplyAction="http://tempuri.org/IFileService/DownLoadResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownLoadAsync(string fileName);
        
        // CODEGEN: Generating message contract since the operation Upload is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Upload", ReplyAction="http://tempuri.org/IFileService/UploadResponse")]
        ConsoleApp1.FileServiceClient.UploadResponse Upload(ConsoleApp1.FileServiceClient.FileType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Upload", ReplyAction="http://tempuri.org/IFileService/UploadResponse")]
        System.Threading.Tasks.Task<ConsoleApp1.FileServiceClient.UploadResponse> UploadAsync(ConsoleApp1.FileServiceClient.FileType request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileType", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileType {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string NameFileValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileValue;
        
        public FileType() {
        }
        
        public FileType(string NameFileValue, System.IO.Stream FileValue) {
            this.NameFileValue = NameFileValue;
            this.FileValue = FileValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadResponse {
        
        public UploadResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : ConsoleApp1.FileServiceClient.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<ConsoleApp1.FileServiceClient.IFileService>, ConsoleApp1.FileServiceClient.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream DownLoad(string fileName) {
            return base.Channel.DownLoad(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownLoadAsync(string fileName) {
            return base.Channel.DownLoadAsync(fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ConsoleApp1.FileServiceClient.UploadResponse ConsoleApp1.FileServiceClient.IFileService.Upload(ConsoleApp1.FileServiceClient.FileType request) {
            return base.Channel.Upload(request);
        }
        
        public void Upload(string NameFileValue, System.IO.Stream FileValue) {
            ConsoleApp1.FileServiceClient.FileType inValue = new ConsoleApp1.FileServiceClient.FileType();
            inValue.NameFileValue = NameFileValue;
            inValue.FileValue = FileValue;
            ConsoleApp1.FileServiceClient.UploadResponse retVal = ((ConsoleApp1.FileServiceClient.IFileService)(this)).Upload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ConsoleApp1.FileServiceClient.UploadResponse> ConsoleApp1.FileServiceClient.IFileService.UploadAsync(ConsoleApp1.FileServiceClient.FileType request) {
            return base.Channel.UploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp1.FileServiceClient.UploadResponse> UploadAsync(string NameFileValue, System.IO.Stream FileValue) {
            ConsoleApp1.FileServiceClient.FileType inValue = new ConsoleApp1.FileServiceClient.FileType();
            inValue.NameFileValue = NameFileValue;
            inValue.FileValue = FileValue;
            return ((ConsoleApp1.FileServiceClient.IFileService)(this)).UploadAsync(inValue);
        }
    }
}
